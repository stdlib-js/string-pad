{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {string} [options.lpad] - string used to left pad\n* @param {string} [options.rpad] - string used to right pad\n* @param {boolean} [options.centerRight] - boolean indicating whether to center right in the event of a tie\n* @returns {(null|Error)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'lpad': 'a',\n*     'rpad': 'b'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '1Oz2V,FD', options ) );\n\t}\n\tif ( hasOwnProp( options, 'lpad' ) ) {\n\t\topts.lpad = options.lpad;\n\t\tif ( !isString( opts.lpad ) ) {\n\t\t\treturn new TypeError( format( '1Oz2W,Gh', 'lpad', opts.lpad ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'rpad' ) ) {\n\t\topts.rpad = options.rpad;\n\t\tif ( !isString( opts.rpad ) ) {\n\t\t\treturn new TypeError( format( '1Oz2W,Gh', 'rpad', opts.rpad ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'centerRight' ) ) {\n\t\topts.centerRight = options.centerRight;\n\t\tif ( !isBoolean( opts.centerRight ) ) {\n\t\t\treturn new TypeError( format( '1Oz2o,GE', 'centerRight', opts.centerRight ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport repeat from '@stdlib/string-repeat';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport lpad from '@stdlib/string-left-pad';\nimport rpad from '@stdlib/string-right-pad';\nimport abs from '@stdlib/math-base-special-abs';\nimport FLOAT64_MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Pads a string such that the padded string has a length of `len`.\n*\n* @param {string} str - string to pad\n* @param {NonNegativeInteger} len - string length\n* @param {Options} [options] - function options\n* @param {string} [options.lpad=''] - string used to left pad\n* @param {string} [options.rpad=' '] - string used to right pad\n* @param {boolean} [options.centerRight=false] - boolean indicating whether to center right in the event of a tie\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} at least one padding must have a length greater than `0`\n* @returns {string} padded string\n*\n* @example\n* var str = pad( 'a', 5 );\n* // returns 'a    '\n*\n* @example\n* var str = pad( 'a', 10, {\n*     'lpad': 'b'\n* });\n* // returns 'bbbbbbbbba'\n*\n* @example\n* var str = pad( 'a', 12, {\n*     'rpad': 'b'\n* });\n* // returns 'abbbbbbbbbbb'\n*\n* @example\n* var opts = {\n*     'lpad': 'a',\n*     'rpad': 'c'\n* };\n* var str = pad( 'b', 10, opts );\n* // returns 'aaaabccccc'\n*\n* @example\n* var opts = {\n*     'lpad': 'a',\n*     'rpad': 'c',\n*     'centerRight': true\n* };\n* var str = pad( 'b', 10, opts );\n* // returns 'aaaaabcccc'\n*/\nfunction pad( str, len, options ) {\n\tvar nright;\n\tvar nleft;\n\tvar isodd;\n\tvar right;\n\tvar left;\n\tvar opts;\n\tvar err;\n\tvar tmp;\n\tvar n;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '1Oz3F,Ex', str ) );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( '1Oz3X,F1', len ) );\n\t}\n\tif ( len > FLOAT64_MAX_SAFE_INTEGER ) {\n\t\tthrow new RangeError( format( '1OzAP,M7', len ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.lpad && opts.rpad ) {\n\t\tn = ( len-str.length ) / 2;\n\t\tif ( n === 0 ) {\n\t\t\treturn str;\n\t\t}\n\t\ttmp = floor( n );\n\t\tif ( tmp !== n ) {\n\t\t\tisodd = true;\n\t\t}\n\t\tif ( n < 0 ) {\n\t\t\tn = floor( abs( n ) );\n\t\t\tnleft = n;\n\t\t\tnright = str.length - n;\n\n\t\t\t// If |len-str.length| is an odd number, take away an additional character from one side...\n\t\t\tif ( isodd ) {\n\t\t\t\tif ( opts.centerRight ) {\n\t\t\t\t\tnright -= 1;\n\t\t\t\t} else {\n\t\t\t\t\tnleft += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str.substring( nleft, nright );\n\t\t}\n\t\tnleft = ceil( n / opts.lpad.length );\n\t\tleft = repeat( opts.lpad, nleft );\n\n\t\tnright = ceil( n / opts.rpad.length );\n\t\tright = repeat( opts.rpad, nright );\n\n\t\t// If (len-str.length) is an odd number, give one side one extra character...\n\t\tn = tmp;\n\t\tnleft = n;\n\t\tnright = n;\n\t\tif ( isodd ) {\n\t\t\tif ( opts.centerRight ) {\n\t\t\t\tnleft += 1;\n\t\t\t} else {\n\t\t\t\tnright += 1;\n\t\t\t}\n\t\t}\n\t\tleft = left.substring( 0, nleft );\n\t\tright = right.substring( 0, nright );\n\t\treturn left + str + right;\n\t}\n\tif ( opts.lpad ) {\n\t\ttmp = lpad( str, len, opts.lpad );\n\t\treturn tmp.substring( tmp.length-len );\n\t}\n\tif ( opts.rpad ) {\n\t\treturn ( rpad( str, len, opts.rpad ) ).substring( 0, len );\n\t}\n\tif ( opts.rpad === void 0 ) {\n\t\treturn ( rpad( str, len, ' ' ) ).substring( 0, len );\n\t}\n\tthrow new RangeError( format( '1OzAR,MF', opts.lpad, opts.rpad ) );\n}\n\n\n// EXPORTS //\n\nexport default pad;\n"],"names":["validate","opts","options","isPlainObject","hasOwnProp","lpad","isString","TypeError","format","rpad","centerRight","isBoolean","pad","str","len","nright","nleft","isodd","right","left","err","tmp","n","isNonNegativeInteger","FLOAT64_MAX_SAFE_INTEGER","RangeError","arguments","length","floor","abs","substring","ceil","repeat"],"mappings":";;6wCAqDA,SAASA,EAAUC,EAAMC,GACxB,OAAMC,EAAeD,GAGhBE,EAAYF,EAAS,UACzBD,EAAKI,KAAOH,EAAQG,MACdC,EAAUL,EAAKI,OACb,IAAIE,UAAWC,EAAQ,WAAY,OAAQP,EAAKI,OAGpDD,EAAYF,EAAS,UACzBD,EAAKQ,KAAOP,EAAQO,MACdH,EAAUL,EAAKQ,OACb,IAAIF,UAAWC,EAAQ,WAAY,OAAQP,EAAKQ,OAGpDL,EAAYF,EAAS,iBACzBD,EAAKS,YAAcR,EAAQQ,aACrBC,EAAWV,EAAKS,cACd,IAAIH,UAAWC,EAAQ,WAAY,cAAeP,EAAKS,cAGzD,KApBC,IAAIH,UAAWC,EAAQ,WAAYN,GAqB5C,CCUA,SAASU,EAAKC,EAAKC,EAAKZ,GACvB,IAAIa,EACAC,EACAC,EACAC,EACAC,EACAlB,EACAmB,EACAC,EACAC,EACJ,IAAMhB,EAAUO,GACf,MAAM,IAAIN,UAAWC,EAAQ,WAAYK,IAE1C,IAAMU,EAAsBT,GAC3B,MAAM,IAAIP,UAAWC,EAAQ,WAAYM,IAE1C,GAAKA,EAAMU,EACV,MAAM,IAAIC,WAAYjB,EAAQ,WAAYM,IAG3C,GADAb,EAAO,CAAA,EACFyB,UAAUC,OAAS,IACvBP,EAAMpB,EAAUC,EAAMC,IAErB,MAAMkB,EAGR,GAAKnB,EAAKI,MAAQJ,EAAKQ,KAEtB,OAAW,KADXa,GAAMR,EAAID,EAAIc,QAAW,GAEjBd,IAERQ,EAAMO,EAAON,MACAA,IACZL,GAAQ,GAEJK,EAAI,GAERN,EADAM,EAAIM,EAAOC,EAAKP,IAEhBP,EAASF,EAAIc,OAASL,EAGjBL,IACChB,EAAKS,YACTK,GAAU,EAEVC,GAAS,GAGJH,EAAIiB,UAAWd,EAAOD,KAE9BC,EAAQe,EAAMT,EAAIrB,EAAKI,KAAKsB,QAC5BR,EAAOa,EAAQ/B,EAAKI,KAAMW,GAE1BD,EAASgB,EAAMT,EAAIrB,EAAKQ,KAAKkB,QAC7BT,EAAQc,EAAQ/B,EAAKQ,KAAMM,GAI3BC,EADAM,EAAID,EAEJN,EAASO,EACJL,IACChB,EAAKS,YACTM,GAAS,EAETD,GAAU,IAGZI,EAAOA,EAAKW,UAAW,EAAGd,IAEZH,GADdK,EAAQA,EAAMY,UAAW,EAAGf,MAG7B,GAAKd,EAAKI,KAET,OADAgB,EAAMhB,EAAMQ,EAAKC,EAAKb,EAAKI,OAChByB,UAAWT,EAAIM,OAAOb,GAElC,GAAKb,EAAKQ,KACT,OAASA,EAAMI,EAAKC,EAAKb,EAAKQ,MAASqB,UAAW,EAAGhB,GAEtD,QAAmB,IAAdb,EAAKQ,KACT,OAASA,EAAMI,EAAKC,EAAK,KAAQgB,UAAW,EAAGhB,GAEhD,MAAM,IAAIW,WAAYjB,EAAQ,WAAYP,EAAKI,KAAMJ,EAAKQ,MAC3D"}